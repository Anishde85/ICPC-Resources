const ll N = 2e5 + 5;
ll fac[N];
    
fac[0] = 1;
for(ll i = 1; i < N; i++) {
    fac[i] = fac[i - 1] * i % mod;
}

//*********************************************************************************************************

//computes a^b
ll pwr(ll a, ll b) {
    ll ans = 1;
    while(b > 0) {
        if(b & 1) { 
            ans = ans * a % mod;
        }
        a = a * a % mod;
        b = b >> 1;
    }
    return ans;
}

// x/y
ll division(ll x, ll y) {
    ll ans = x * pwr(y, mod - 2) % mod;
    return ans;
}

// xCy
ll comb(ll x, ll y) {
    ll f = fac[y] * fac[x - y] % mod;
    ll temp = fac[x] * pwr(f, mod - 2) % mod;
    return temp;
}

//*********************************************************************************************************

// Another way of finding xCy
ll comb(ll x, ll y) {
    if(y > x)
        return 0;
    
    double f1 = lgamma(x + 1);
    double f2 = lgamma(y + 1);
    double f3 = lgamma(x - y + 1);
    double f4 = f2 + f3;
    double f5 = f1 - f4;
    
    ll res = round(exp(f5));

    return res;
}


//********** Binomial Coefficients(nCr) *******************************************************************

const ll MAX = 5010;

vector<ll> fac, finv, inv;

void binom_init() {
    fac.assign(MAX, 0);
    finv.assign(MAX, 0);
    inv.assign(MAX, 0);

    fac[0] = fac[1] = 1;
    inv[1] = 1;
    finv[0] = finv[1] = 1;
    
    for(ll i = 2; i < MAX; i++){
        fac[i] = fac[i - 1] * i % mod;
        inv[i] = mod - mod / i * inv[mod % i] % mod;
        finv[i] = finv[i - 1] * inv[i] % mod;
    }
}

ll binom(ll n, ll r){
    if(n < r || n < 0 || r < 0) {
        return 0;
    }
    return (fac[n] * finv[r] % mod * finv[n - r] % mod);
}